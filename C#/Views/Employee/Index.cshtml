@using GridMvc.Html
@model MockData.Models.Employee

@{
    ViewBag.Title = "Employee";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>

<div id="employee">
    <div id="divEmpForm" style="width:50%;margin:auto;">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "employeeform" }))
        {

            @Html.AntiForgeryToken()

            <fieldset>
                <legend> Employee </legend>
                <div class="form-group">
                    @Html.LabelFor(model => model.first_name)
                    @Html.HiddenFor(model => model.employee_id)
                    @Html.TextBoxFor(m => m.first_name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.first_name,"", new { @class = "lbl-err" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.last_name)
                    @Html.TextBoxFor(m => m.last_name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.last_name, "", new { @class = "lbl-err" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.email)
                    @Html.TextBoxFor(m => m.email, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.email, "", new { @class = "lbl-err" })
                </div>
                <p>
                    <input type="button" id="btnSave"  class="btn btn-primary" value="SAVE"  />
                </p>
               
            </fieldset>
        }
    </div>
    <div style="height:20px;">
        <!--dummy div-->
    </div>
    <div id="divEmployeeGrid" style="width:50%;margin:auto;">
        @{
            var employees = (List<MockData.Models.Employee>)ViewData["empList"]; // Cast the list
        }
        <div style="width:100%">
         @Html.Grid(employees).Columns(columns =>
         {
           columns.Add(c => c.first_name).Titled("First Name");
           columns.Add(c => c.last_name).Titled("Last Name").Filterable(true);
           columns.Add(c => c.email).Titled("Email");
           columns.Add()
           .Encoded(false)
           .Sanitized(false)
           .SetWidth(30)
           .RenderValueAs(c => Html.ActionLink("Edit", "", "", new { onclick = "return EditEmployee('" + c.employee_id + "');" }));
           columns.Add()
          .Encoded(false)
          .Sanitized(false)
          .SetWidth(30)
          .RenderValueAs(c => Html.ActionLink("Delete", "", "", new { onclick = "return DeleteEmployee('" + c.employee_id + "');" }));
       }).WithPaging(20).Sortable(true).Named("empGrid")
        </div>
    </div>

</div>
<script>
    $(function () {
        /*Save employee info while adding and updating an employee*/
        $('#btnSave').click(function () {
            $('form').validate();
            if ($('form').valid()) {
                var datastring = $("#employeeform").serialize();
                URL = "@Url.Action("Add", "Employee")";
                jQuery.ajax({
                type: "POST",
                url: URL,
                data: datastring,
                dataType: "json",
                    success: function (data) {
                        $('#employeeform')[0].reset();
                        $("#employee_id").val(0);
                        if (data.length > 0) {
                            $('.grid-empty-text').remove();
                            $('.grid-row').remove();
                        }
                        var tr;
                        var dataCount = 0;
                        if (data.length > 3)
                            dataCount = 3;
                        else
                            dataCount = data.length;
                        for (var i = 0; i < dataCount; i++) {
                            tr = $("<tr class='grid-row' />");
                            tr.append("<td>" + data[i].first_name + "</td>");
                            tr.append("<td>" + data[i].last_name + "</td>");
                            tr.append("<td>" + data[i].email + "</td>");
                            tr.append("<td><a href='#' onclick='return EditEmployee(" + data[i].employee_id + ");'>Edit</a></td>");
                            tr.append("<td><a href='#' onclick='return DeleteEmployee(" + data[i].employee_id + ");'>Delete</a></td>");
                            $('table').append(tr);
                        }
                        alert("Employee Details Saved successfully");
                    },
                failure: function (errMsg) {
                        alert("Sorry, Cannot Save Employee Info Now!");
                    }
                });
            }
        });
    })

    /*Fetch details from controller and bind details in form on edit click*/
    function EditEmployee(employeeId) {
        URL="@Url.Action("Edit", "Employee")";
        jQuery.ajax({
            type: "GET",
            url: URL,
            data: { Id: employeeId },
            dataType: "json",
            success: function (data) {
                $("#first_name").val(data.first_name);
                $("#last_name").val(data.last_name);
                $("#email").val(data.email);
                $("#employee_id").val(data.employee_id);
            },
            failure: function (errMsg) {
                alert("Sorry, Cannot Edit Employee Info Now!");
            }
        });
        return false;
    }

    /*Delete corresponding employee info and refresh grid*/
    function DeleteEmployee(employeeId) {
        URL="@Url.Action("Delete", "Employee")";
        jQuery.ajax({
            type: "GET",
            url: URL,
            data: { Id: employeeId },
            dataType: "json",
            success: function (data) {
                if (data.length > 0) {
                    $('.grid-empty-text').remove();
                    $('.grid-row').remove();
                }
                var tr;
                var dataCount = 0;
                if (data.length > 3)
                    dataCount = 3;
                else
                    dataCount = data.length;
                for (var i = 0; i < dataCount; i++) {
                    tr = $("<tr class='grid-row' />");
                    tr.append("<td>" + data[i].first_name + "</td>");
                    tr.append("<td>" + data[i].last_name + "</td>");
                    tr.append("<td>" + data[i].email + "</td>");
                    tr.append("<td><a href='#' onclick='return EditEmployee(" + data[i].employee_id + ");'>Edit</a></td>");
                    tr.append("<td><a href='#' onclick='return DeleteEmployee(" + data[i].employee_id + ");'>Delete</a></td>");
                    $('table').append(tr);
                }
                alert("Succesfully deleted the Employee Info");
            },
            failure: function (errMsg) {
                alert("Sorry, Cannot Delete Employee Info Now!");
            }
        });
        return false;
    }
</script>
